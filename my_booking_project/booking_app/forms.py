from django import forms
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm
from django.core.exceptions import ValidationError
from django.core.validators import MinLengthValidator
from .models import Partner, Review

User = get_user_model()


# üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
class PartnerRegistrationForm(UserCreationForm):
    company_name = forms.CharField(max_length=255, required=True)
    phone_number = forms.CharField(max_length=20, required=True)
    email = forms.EmailField(required=True)
    name = forms.CharField(max_length=100, required=True)
    surname = forms.CharField(max_length=100, required=True)
    passport_details = forms.CharField(max_length=11, required=True)

    class Meta(UserCreationForm.Meta):
        model = User
        fields = ('email', 'name', 'surname', 'passport_details', 'phone_number', 'password1', 'password2')

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if User.objects.filter(email=email).exists():
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return email

    def save(self, commit=True):
        user = super().save(commit=False)
        user.username = self.cleaned_data['email']
        user.first_name = self.cleaned_data['name']
        user.last_name = self.cleaned_data['surname']
        user.passport_details = self.cleaned_data['passport_details']
        user.phone_number = self.cleaned_data['phone_number']
        user.is_guest = False
        if commit:
            user.save()
            Partner.objects.create(
                user=user,
                company_name=self.cleaned_data['company_name'],
                phone_number=self.cleaned_data['phone_number'],
            )
        return user


# üîπ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
class PartnerProfileForm(forms.ModelForm):
    company_name = forms.CharField(
        label='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
        error_messages={'max_length': "–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ."},
        validators=[MinLengthValidator(2, message="–ò–º—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")],
        max_length=255
    )
    phone_number = forms.CharField(
        label='–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏',
        error_messages={'max_length': "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π."},
        validators=[MinLengthValidator(10, message="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä")],
        max_length=20
    )

    class Meta:
        model = Partner
        fields = ['company_name', 'phone_number']

    def save(self, commit=True):
        instance = super().save(commit=False)
        user = instance.user
        user.phone_number = self.cleaned_data.get('phone_number')
        user.save()
        if commit:
            instance.save()
        return instance


# üîπ –§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–∞
class ReviewForm(forms.ModelForm):
    RATING_CHOICES = [(i, str(i)) for i in range(1, 6)]
    title = forms.CharField(label='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    review = forms.CharField(label='–û—Ç–∑—ã–≤', widget=forms.Textarea)
    rating = forms.ChoiceField(choices=RATING_CHOICES, label='–†–µ–π—Ç–∏–Ω–≥')
    user_email = forms.EmailField(label='–í–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞', required=False)

    class Meta:
        model = Review
        fields = ['title', 'review', 'rating']

    def __init__(self, *args, **kwargs):
        show_email = kwargs.pop('show_email', False)
        super().__init__(*args, **kwargs)
        if not show_email:
            self.fields.pop('user_email')

    def get_user_email(self):
        return self.cleaned_data.get('user_email')


# üîπ üî• –ù–æ–≤–∞—è: —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserProfileForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['display_name', 'email', 'birth_date', 'avatar', 'phone_number']
        widgets = {
            'birth_date': forms.DateInput(attrs={'type': 'date'}),
        }
